.. _json-tutorial:

``json``
========

.. image:: ../_static/json.png
   :align: right
   :alt: JSON logo

Par Yoan Blanc [#yb]_

Introduction
------------

JSON_ (*JavaScript Object Notation*) est un format simple, compact qui a, au
fil des ans, remplac√© XML comme format d'√©change pr√©f√©r√©. Standardis√© au sein
de l'`ECMA-404`_ il est support√© par l'√©norme majorit√© des langages de
programmation.

JSON_ comporte six types : cha√Æne de caract√®res, nombre, objet, tableau,
bool√©en (``true``, ``false``) et ``null``.

.. code-block:: json

    {
        "cl√©": "valeur",
        "age": 20,
        "pi": 314.59e-2,
        "tableau": [1, 2, 3, ["x", "y"]],
        "objet": {
            "cl√©": "autre valeur",
            "bool√©en": false
        },
        "rien": null
    }

Il serait possible de lire directement cette structure de donn√©e en Python si
les valeurs bool√©ennes et la valeur vide n'√©taient pas √©crites diff√©remment :
``True``, ``False`` et ``None``.

Le module :py:mod:`json` est des plus simples √† utiliser. Il est pr√©sent√© par
le fameux Kenneith Reitz dans `Hitchhiker's Guide To Python
<http://docs.python-guide.org/en/latest/scenarios/json/>`_.

Exemple
-------

L'API du module :py:mod:`json` est similaire √† celle utilis√©e par
:py:mod:`marshal` et :py:mod:`pickle` qui permettent de s√©rialiser des objets
Python.

:py:func:`~json.load`:
    charge un fichier JSON;
:py:func:`~json.loads`:
    charge une cha√Æne de caract√®res;
:py:func:`~json.dump`:
    √©crit en JSON dans fichier;
:py:func:`~json.dumps`:
    √©crit en JSON dans une cha√Æne de caract√®res.

.. code-block:: pycon

    >>> import json

    >>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
    '["foo", {"bar": ["baz", null, 1.0, 2]}]'

    >>> json.dumps("üêç")
    '"\\ud83d\\udc0d"'

    >>> json.loads('[1, 2, "Hello"]')
    [1, 2, 'Hello']

Un exemple travaillant avec un fichier externe. Un point tr√®s important est
que JSON est toujours encod√© en UTF-8.

.. literalinclude:: ./examples/test.json

.. literalinclude:: ./examples/example.py

R√©sultat :

.. literalinclude:: ./examples/test.out.json


Validation
----------

:py:mod:`jsonschema` permet de valider un document JSON selon un mod√®le.
consultez la documentation de `JSON Schema`_ pour en savoir plus.

.. literalinclude:: ./examples/schema.json

.. literalinclude:: ./examples/validation.py

Format binaire
--------------

Un document JSON est un fichier texte, qui consomme plus de place qu'une
repr√©sentation binaire. `MessagePack`_ permet de r√©duire efficacement l'espace
n√©cessaire au stockage et √† l'√©change de tels documents. En Python, c'est le
module :py:mod:`msgpack`.

.. literalinclude:: ./examples/msg.pycon
   :language: pycon

Notez que cette petite diff√©rence n'est plus forc√©ment int√©ressante si le
contenu est compress√© √† l'aide de :py:mod:`gzip`.

.. literalinclude:: ./examples/gzip.pycon
   :language: pycon

Parfois, le mieux est l'ennemi du bien.

Streaming
---------

Autre inconv√©nient majeur vis-√†-vis du format XML est qu'il n'est pas ais√© de
lire un document au fur et √† mesure qu'il est re√ßu, en *streaming*. En XML, on
utilise une API nomm√©e SAX (Simple API for XML). ``json`` propose un mod√®le
demandant de charger l'entier d'un document en m√©moire. Comme avec DOM en XML.
Ce probl√®me se r√©soud √† l'aide de `YAJL`_ et du module `ijson`_.

.. literalinclude:: ./examples/stream.py
   :linenos:

Conclusion
----------

JSON est un format de fichier √† conna√Ætre, comprendre et savoir utiliser. Dans
sa version basique, voire m√™me dans sa version riche nomm√©e `JSON-LD`_ utilis√©e
par de nombreuses API. Si vous devez consommer des donn√©es JSON externe, il
n'est que vivement recommand√© d'ajouter un sch√©ma afin d'offrir un message
d'erreur ad√©quat en cas de non respect du document esp√©r√©. Et des solutions
existent afin de contourner des probl√®mes de fichiers inutilement volumineux ou
devant √™tre charg√©s compl√©tement en m√©moire avoir de pouvoir √™tre lus.

    *JSON c'est bon, mangez-en!*

    -- Anonymous


.. [#yb] <yoan.blanc@he-arc.ch>

.. Bibliographie (ceci est un commentaire)

.. _JSON: http://json.org/
.. _JSON Schema: http://json-schema.org/
.. _JSON-LD: http://json-ld.org/
.. _ECMA-404: http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf
.. _MessagePack: http://msgpack.org/
.. _YAJL: http://lloyd.github.io/yajl/
.. _ijson: https://pypi.python.org/pypi/ijson/
